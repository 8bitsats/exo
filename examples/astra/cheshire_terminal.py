import asyncio
import os
import sys
from datetime import datetime
from exo.api.cheshire_terminal import get_terminal

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_banner():
    banner = """
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°ñ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢≤‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚¢Ä‚£Ä‚£§‚£§‚£§‚£§‚£Ä‚°Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£î‚¢ø‚°ø‚†ü‚†õ‚†õ‚†ª‚¢ø‚°ø‚£¢‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£∂‚£æ‚£ø‚£ø‚£ø‚£∑‚£§‚£Ä‚°Ä‚¢Ä‚£Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä
    ‚†Ä‚¢†‚°ø‚†ã‚†Å‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†â‚†ª‚£ø‚†á‚†Ä‚†Ä‚†∏‚£ø‚°ø‚†ã‚¢∞‚£ø‚°á‚†Ä‚†Ä‚†à‚†ô‚¢ø‚°Ñ‚†Ä
    ‚†Ä‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£∑‚°Ä‚†Ä‚†∞‚£ø‚£∂‚£∂‚£ø‚°é‚†Ä‚¢Ä‚£æ‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚†Ä
    ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£∑‚£Ñ‚†Ä‚£ø‚£ø‚£ø‚£ø‚†Ä‚£†‚£æ‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä
    ‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢ø‚¢á‚£ø‚£ø‚£ø‚£ø‚°∏‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†ê‚¢§‚£Ä‚£Ä‚¢Ä‚£Ä‚£†‚£¥‚£ø‚£ø‚†ø‚†ã‚†ô‚†ø‚£ø‚£ø‚£¶‚£Ñ‚£Ä‚†Ä‚†Ä‚£Ä‚°†‚†Ç‚†Ä‚†Ä‚†Ä
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†õ‚†õ‚†õ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†õ‚†õ‚†õ‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    
    üé≠ C H E S H I R E  T E R M I N A L üé≠
    Your mystical gateway to $GRIN trading insights ‚ú®
    Now with real-time Solana blockchain vision! üîÆ
    """
    print(banner)

def print_help():
    help_text = """
    üåü Mystical Commands üåü
    
    ‚Ä¢ analyze wallet <address> - Peer into any Solana wallet's secrets
    ‚Ä¢ market - Get real-time market insights and trends
    ‚Ä¢ help - Show this magical guide
    ‚Ä¢ clear - Clear the mist from your screen
    ‚Ä¢ exit - Fade away into the blockchain mist
    
    Ask me anything about $GRIN, Solana, or the market! ‚ú®
    """
    print(help_text)

def print_timestamp():
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"\n[{now}] Market time... üï∞Ô∏è\n")

async def main():
    terminal = get_terminal()
    
    clear_screen()
    print_banner()
    print_timestamp()
    print_help()
    
    while True:
        try:
            # Get trader's inquiry
            user_input = input("\nTrader: ").strip()
            
            # Handle special commands
            if user_input.lower() == 'exit':
                print("\nCheshire: The market never sleeps, but I must fade away... Until next time! ‚ú®")
                break
            elif user_input.lower() == 'clear':
                clear_screen()
                print_banner()
                print_timestamp()
                continue
            elif user_input.lower() == 'help':
                print_help()
                continue
            elif not user_input:
                continue
                
            # Get mystical market insights with blockchain data
            response = await terminal.chat(user_input)
            print(f"\nCheshire: {response.get('response', 'The market mist clouds my vision... üé≠')}\n")
            
        except KeyboardInterrupt:
            print("\nCheshire: Caught by surprise! Fading into the mist... ‚ú®")
            break
        except Exception as e:
            print(f"\nOh my... A glitch in the market matrix! üé≠ ({str(e)})")
            continue

if __name__ == "__main__":
    try:
        # Kill any existing instances
        os.system('pkill -f "python3 examples/astra/cheshire_terminal.py"')
        # Start new instance
        asyncio.run(main())
    except Exception as e:
        print(f"Fatal error in the trading wonderland: {e}")
        sys.exit(1)
