# This is the reusable workflow file
name: Distributed Job Runner

on:
  workflow_call:
    inputs:
      config:
        required: true
        type: string
      model:
        required: true
        type: string
      calling_job_name:
        required: true
        type: string
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        env:
          CONFIG: ${{ inputs.config }}
        run: |
          MATRIX=$(echo $CONFIG | jq -c '{cpu: [to_entries | .[] | .key as $k | range(.value) | $k]}')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-distributed-job:
    needs: generate-matrix
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    runs-on: ['self-hosted', 'macOS', '${{ matrix.cpu }}']
    env:
      HARDWARE_CONFIG: ${{ inputs.config }}
      model: ${{ inputs.model }}
      # Add performance-related environment variables
      MTL_DEBUG_LAYER: 0
      METAL_VALIDATION_ENABLED: 0
      MLX_METAL_VALIDATION: 0
      MLX_METAL_DEBUG: 0
      MLX_FORCE_P_CORES: 1
      MLX_METAL_PREWARM: 1
      PYTHONOPTIMIZE: 2
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf "$GITHUB_WORKSPACE"
          sudo mkdir -p "$GITHUB_WORKSPACE"
          sudo chown -R $(whoami):$(id -g) "$GITHUB_WORKSPACE"

      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          export PATH="/usr/local/bin:/opt/homebrew/bin:$PATH"
          python3.12 -m venv .venv || {
            echo "Failed to find python3.12. Checking installation locations:"
            ls -l /usr/local/bin/python* /opt/homebrew/bin/python* 2>/dev/null || true
            exit 1
          }
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -e .
          pip install boto3==1.35.76

      - name: Apply Performance Optimizations
        run: |
          # Make the script executable and run it
          chmod +x .github/optimize_performance.sh
          ./.github/optimize_performance.sh
          
          # Source the performance environment variables
          source /tmp/performance_env.sh
          
          # Additional runtime optimizations
          
          # Set process scheduling
          sudo taskpolicy -b PERFORMANCE
          
          # Verify optimizations
          echo "Verifying performance settings..."
          pmset -g
          sysctl iogpu
          env | grep -E "MLX_|METAL_|MTL_"

      - name: Run exo
        env:
          aws_access_key_id: ${{ secrets.S3_EXO_BENCHMARKS_AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.S3_EXO_BENCHMARKS_AWS_SECRET_ACCESS_KEY }}
        run: |
          # Source performance environment variables
          source /tmp/performance_env.sh
          
          # Debug information
          echo "Current commit SHA: $GITHUB_SHA"
          git rev-parse HEAD
          git status
          
          CALLING_JOB="${{ inputs.calling_job_name }}"
          UNIQUE_JOB_ID="${CALLING_JOB}_${model}_${GITHUB_RUN_ID}"
          ALL_NODE_IDS=$(for i in $(seq ${{ strategy.job-total }} -1 0); do echo -n "${UNIQUE_JOB_ID}_${i},"; done | sed 's/,$//')
          MY_NODE_ID="${UNIQUE_JOB_ID}_${{ strategy.job-index }}"
          
          source .venv/bin/activate
          export PATH="/usr/local/bin:/opt/homebrew/bin:$PATH"
          
          echo "Starting exo daemon..."
          # Set high priority and performance mode
          sudo renice -n -20 $$ || true
          sudo taskpolicy -b PERFORMANCE $$ || true
          
          # Start exo with performance optimizations
          sudo taskpolicy -b PERFORMANCE .venv/bin/exo \
            --node-id="${MY_NODE_ID}" \
            --node-id-filter="${ALL_NODE_IDS}" \
            --interface-type-filter="Ethernet" \
            --chatgpt-api-port 52415 > output1.log 2>&1 &
          PID1=$!
          
          # Set process and thread priorities
          sudo renice -n -20 -p $PID1 || true
          sudo taskpolicy -b PERFORMANCE -p $PID1 || true
          
          # Set thread priority for all Python threads
          for tid in $(ps -M $PID1 | grep Python | awk '{print $2}'); do
            sudo renice -n -20 -p $tid || true
            sudo taskpolicy -b PERFORMANCE -p $tid || true
          done

          echo "Exo process started with PID: $PID1"
          tail -f output1.log &
          TAIL1=$!

          trap 'kill $TAIL1' EXIT
          trap 'kill $PID1' EXIT

          echo "Waiting for all nodes to connect..."
          for i in {1..100}; do
            echo "Attempt $i: Checking node count..."
            nodes=$(curl -s http://localhost:52415/topology | jq ".nodes | length")
            echo "Current node count: $nodes"
            if [ "$nodes" -eq "${{ strategy.job-total }}" ]; then
              echo "All nodes connected successfully!"
              break
            fi
            sleep 5
          done

          if ! kill -0 $PID1 2>/dev/null; then
              echo "ERROR: Instance (PID $PID1) died unexpectedly. Full log output:"
              cat output1.log
              exit 1
          fi

          if [ "${{ strategy.job-index }}" -eq "0" ]; then
            sleep 10
            echo "This is the primary node (index 0). Running benchmark..."
            GITHUB_JOB=$CALLING_JOB python .github/bench.py
          else
            echo "This is a secondary node (index ${{ strategy.job-index }}). Waiting for completion..."
            sleep 10
            while true; do
              echo "Checking if primary node is still running..."
              nodes=$(curl -s http://localhost:52415/topology | jq ".nodes | length")
              echo "Current node count: $nodes"
              if [ "$nodes" -lt "${{ strategy.job-total }}" ]; then
                echo "Primary node completed, exiting..."
                break
              fi
              sleep 5
            done
          fi

      - name: Check Final System State
        if: always()
        run: |
          echo "=== Final System State ==="
          sudo pmset -g
          sudo powermetrics -n 1 -i 1000 --show-process-energy || true
          system_profiler SPDisplaysDataType
          sysctl iogpu
          ps -eo pid,ppid,user,%cpu,%mem,nice,state,command | grep -i python
          env | grep -E "MLX_|METAL_|MTL_"
          echo "=== End Final System State ==="
